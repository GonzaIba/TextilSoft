// <auto-generated />
using System;
using Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.11")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Domain.Models.ClientesModel", b =>
                {
                    b.Property<int>("ID_Cliente")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Apellido")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("DNI")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("EstadoCliente")
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("FechaNac")
                        .HasColumnType("datetime");

                    b.Property<string>("Mail")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Nombre")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Residencia")
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("Telefono")
                        .HasColumnType("int");

                    b.HasKey("ID_Cliente");

                    b.ToTable("Cliente");
                });

            modelBuilder.Entity("Domain.Models.DetallePedidosModel", b =>
                {
                    b.Property<int>("ID_DetallePedido")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Cantidad")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("ID_Pedido")
                        .HasColumnType("int");

                    b.Property<int>("ID_Producto")
                        .HasColumnType("int");

                    b.HasKey("ID_DetallePedido");

                    b.HasIndex("ID_Pedido");

                    b.HasIndex("ID_Producto");

                    b.ToTable("DetallePedido");
                });

            modelBuilder.Entity("Domain.Models.EmpleadosModel", b =>
                {
                    b.Property<int>("ID_Empleados")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Apellido")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("DNI")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Legajo")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Nombre")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Residencia")
                        .HasColumnType("varchar(50)");

                    b.HasKey("ID_Empleados");

                    b.ToTable("Empleados");
                });

            modelBuilder.Entity("Domain.Models.FacturasModel", b =>
                {
                    b.Property<int>("ID_Factura")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("Fecha")
                        .HasColumnType("datetime2");

                    b.Property<int>("ID_Pedido")
                        .HasColumnType("int");

                    b.Property<int?>("NumeroFactura")
                        .HasColumnType("int");

                    b.Property<int?>("NumeroPedido")
                        .HasColumnType("int");

                    b.Property<decimal?>("TotalAPagar")
                        .HasColumnType("decimal(18,0)");

                    b.Property<decimal?>("TotalAbonado")
                        .HasColumnType("decimal(18,0)");

                    b.HasKey("ID_Factura");

                    b.HasIndex("ID_Pedido");

                    b.ToTable("Factura");
                });

            modelBuilder.Entity("Domain.Models.OrdenDeTrabajoModel", b =>
                {
                    b.Property<int>("ID_OrdenDeTrabajo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("EsPedido")
                        .HasColumnType("bit");

                    b.Property<string>("EstadoOrden")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("FechaCerrado")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaInicio")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<int>("ID_Pedido")
                        .HasColumnType("int");

                    b.Property<int>("ID_Sector")
                        .HasColumnType("int");

                    b.HasKey("ID_OrdenDeTrabajo");

                    b.HasIndex("ID_Pedido");

                    b.HasIndex("ID_Sector");

                    b.ToTable("OrdenDeTrabajo");
                });

            modelBuilder.Entity("Domain.Models.PedidosModel", b =>
                {
                    b.Property<int>("ID_Pedido")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ClienteID_Cliente")
                        .HasColumnType("int");

                    b.Property<int?>("EmpleadosID_Empleados")
                        .HasColumnType("int");

                    b.Property<string>("EstadoPedido")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("Fecha")
                        .HasColumnType("datetime2");

                    b.Property<int>("ID_Cliente")
                        .HasColumnType("int");

                    b.Property<int>("ID_Empleados")
                        .HasColumnType("int");

                    b.Property<int>("NumeroPedido")
                        .HasColumnType("int");

                    b.Property<decimal?>("Seña")
                        .HasColumnType("decimal(18,0)");

                    b.Property<decimal?>("TotalPago")
                        .HasColumnType("decimal(18,0)");

                    b.HasKey("ID_Pedido");

                    b.HasIndex("ClienteID_Cliente");

                    b.HasIndex("EmpleadosID_Empleados");

                    b.ToTable("Pedidos");
                });

            modelBuilder.Entity("Domain.Models.ProductosModel", b =>
                {
                    b.Property<int>("ID_Producto")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CodigoProducto")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Color")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Composicion")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Estampa")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("NombreProducto")
                        .HasColumnType("varchar(50)");

                    b.Property<decimal?>("Precio")
                        .HasColumnType("decimal(18,0)");

                    b.Property<string>("TallePrenda")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Tejido")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("TipoProducto")
                        .HasColumnType("varchar(50)");

                    b.HasKey("ID_Producto");

                    b.ToTable("Producto");
                });

            modelBuilder.Entity("Domain.Models.ProductosProveedorModel", b =>
                {
                    b.Property<int>("ID_ProductoProveedor")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CantidadRollos")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CodigoProducto")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EmpleadosModelID_Empleados")
                        .HasColumnType("int");

                    b.Property<int>("ID_Proveedor")
                        .HasColumnType("int");

                    b.Property<string>("MarcaTela")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("NombreProducto")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Precio")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("TipoTela")
                        .HasColumnType("varchar(50)");

                    b.HasKey("ID_ProductoProveedor");

                    b.HasIndex("EmpleadosModelID_Empleados");

                    b.HasIndex("ID_Proveedor");

                    b.ToTable("ProductoProveedor");
                });

            modelBuilder.Entity("Domain.Models.ProveedoresModel", b =>
                {
                    b.Property<int>("ID_Proveedor")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DNI")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("EstadoProveedor")
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("FechaNac")
                        .HasColumnType("datetime2");

                    b.Property<string>("LugarEmpresa")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Mail")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Nombre")
                        .HasColumnType("varchar(50)");

                    b.HasKey("ID_Proveedor");

                    b.ToTable("Proveedor");
                });

            modelBuilder.Entity("Domain.Models.SectorModel", b =>
                {
                    b.Property<int>("ID_Sector")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("NombreSector")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("ID_Sector");

                    b.ToTable("Sector");
                });

            modelBuilder.Entity("Domain.Models.VentasModel", b =>
                {
                    b.Property<int>("ID_Venta")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CapitalRecibido")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Descripcion")
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("FechaVenta")
                        .HasColumnType("datetime2");

                    b.Property<int>("ID_Producto")
                        .HasColumnType("int");

                    b.HasKey("ID_Venta");

                    b.HasIndex("ID_Producto");

                    b.ToTable("Venta");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Domain.Models.DetallePedidosModel", b =>
                {
                    b.HasOne("Domain.Models.PedidosModel", "Pedidos")
                        .WithMany("DetallePedido")
                        .HasForeignKey("ID_Pedido")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.ProductosModel", "Producto")
                        .WithMany("DetallePedido")
                        .HasForeignKey("ID_Producto")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pedidos");

                    b.Navigation("Producto");
                });

            modelBuilder.Entity("Domain.Models.FacturasModel", b =>
                {
                    b.HasOne("Domain.Models.PedidosModel", "Pedidos")
                        .WithMany("Factura")
                        .HasForeignKey("ID_Pedido")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pedidos");
                });

            modelBuilder.Entity("Domain.Models.OrdenDeTrabajoModel", b =>
                {
                    b.HasOne("Domain.Models.PedidosModel", "Pedidos")
                        .WithMany("OrdenDeTrabajo")
                        .HasForeignKey("ID_Pedido")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.SectorModel", "Sector")
                        .WithMany("OrdenDeTrabajo")
                        .HasForeignKey("ID_Sector")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pedidos");

                    b.Navigation("Sector");
                });

            modelBuilder.Entity("Domain.Models.PedidosModel", b =>
                {
                    b.HasOne("Domain.Models.ClientesModel", "Cliente")
                        .WithMany("Pedidos")
                        .HasForeignKey("ClienteID_Cliente");

                    b.HasOne("Domain.Models.EmpleadosModel", "Empleados")
                        .WithMany("Pedidos")
                        .HasForeignKey("EmpleadosID_Empleados");

                    b.Navigation("Cliente");

                    b.Navigation("Empleados");
                });

            modelBuilder.Entity("Domain.Models.ProductosProveedorModel", b =>
                {
                    b.HasOne("Domain.Models.EmpleadosModel", null)
                        .WithMany("ProductoProveedor")
                        .HasForeignKey("EmpleadosModelID_Empleados");

                    b.HasOne("Domain.Models.ProveedoresModel", "Proveedor")
                        .WithMany("ProductoProveedor")
                        .HasForeignKey("ID_Proveedor")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Proveedor");
                });

            modelBuilder.Entity("Domain.Models.VentasModel", b =>
                {
                    b.HasOne("Domain.Models.ProductosModel", "Producto")
                        .WithMany("Venta")
                        .HasForeignKey("ID_Producto")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Producto");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.ClientesModel", b =>
                {
                    b.Navigation("Pedidos");
                });

            modelBuilder.Entity("Domain.Models.EmpleadosModel", b =>
                {
                    b.Navigation("Pedidos");

                    b.Navigation("ProductoProveedor");
                });

            modelBuilder.Entity("Domain.Models.PedidosModel", b =>
                {
                    b.Navigation("DetallePedido");

                    b.Navigation("Factura");

                    b.Navigation("OrdenDeTrabajo");
                });

            modelBuilder.Entity("Domain.Models.ProductosModel", b =>
                {
                    b.Navigation("DetallePedido");

                    b.Navigation("Venta");
                });

            modelBuilder.Entity("Domain.Models.ProveedoresModel", b =>
                {
                    b.Navigation("ProductoProveedor");
                });

            modelBuilder.Entity("Domain.Models.SectorModel", b =>
                {
                    b.Navigation("OrdenDeTrabajo");
                });
#pragma warning restore 612, 618
        }
    }
}
